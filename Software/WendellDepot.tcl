#!/usr/bin/wish
# Generated code: Tue Feb 18 11:03:44 EST 2025
# Generated by: $Id: CTCPanelWindow.tcl 709 2009-05-01 15:20:49Z heller $
# Add your code to the bottom (after the 'Add User code after this line').
#
# -name {Wendell Depot Layout}
# -width 1050
# -height 750
# -hascmri no
# -hasctiacela no
# -hasazatrax no
# -simplemode no
# -openlcbmode yes
# -openlcbtransport CANGridConnectOverTcp
# -openlcbtransportopts {-port 12021 -nid 05:01:01:01:22:89 -host fruitloops.deepsoft.com}
# -baseevent 05.01.01.01.22.89.00.00
# additionalPackages
# Load Tcl/Tk system supplied packages
package require Tk;#		Make sure Tk is loaded
package require tile;#          Load tile
package require snit;#		Load Snit

# Load MRR System packages
# Add MRR System package Paths
lappend auto_path /usr/local/lib/MRRSystem;# C++ (binary) packages
lappend auto_path /usr/local/share/MRRSystem;# Tcl (source) packages

package require snitStdMenuBar;#  Load the standard menu bar package
package require LabelFrames;#   Label frame widgets
package require MainFrame;#     Main Frame widget
package require ScrollableFrame;#     Scrollable Frame widget
package require MainWindow;#    Load the Main Window package
package require CTCPanel 2.0;#  Load the CTCPanel package (V2)
package require grsupport 2.0;# Load Graphics Support code (V2)

#* 
#* ------------------------------------------------------------------
#* panelCode.tcl - Panel Main Window Creation Library
#* Created by Robert Heller on Sun Apr 13 18:27:24 2008
#* ------------------------------------------------------------------
#* Modification History: $Log$
#* Modification History: Revision 1.1  2002/07/28 14:03:50  heller
#* Modification History: Add it copyright notice headers
#* Modification History:
#* ------------------------------------------------------------------
#* Contents:
#* ------------------------------------------------------------------
#*  
#*     Model RR System, Version 2
#*     Copyright (C) 1994,1995,2002-2005  Robert Heller D/B/A Deepwoods Software
#* 			51 Locke Hill Road
#* 			Wendell, MA 01379-9728
#* 
#*     This program is free software; you can redistribute it and/or modify
#*     it under the terms of the GNU General Public License as published by
#*     the Free Software Foundation; either version 2 of the License, or
#*     (at your option) any later version.
#* 
#*     This program is distributed in the hope that it will be useful,
#*     but WITHOUT ANY WARRANTY; without even the implied warranty of
#*     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#*     GNU General Public License for more details.
#* 
#*     You should have received a copy of the GNU General Public License
#*     along with this program; if not, write to the Free Software
#*     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#* 
#*  
#* 

# $Id: panelCode.tcl 625 2008-04-21 23:39:05Z heller $

snit::type MainWindow {
  pragma -hastypeinfo    no
  pragma -hastypedestroy no
  pragma -hasinstances   no

  typecomponent main
  typecomponent swframe
  typecomponent ctcpanel

  delegate typemethod {ctcpanel *} to ctcpanel
  delegate typemethod {main *} to main
  typemethod createwindow {args} {
    set name [from args -name {}]
    set width [from args -width 800]
    set height [from args -height 800]
    set extramenus [from args -extramenus {}]
    wm protocol . WM_DELETE_WINDOW [mytypemethod CarefulExit]
    wm withdraw .
    wm title . "$name"
    set main [mainwindow .main -extramenus $extramenus]
    pack $main -expand yes -fill both
    $main menu entryconfigure file New -state disabled
    $main menu entryconfigure file Open... -state disabled
    $main menu entryconfigure file Save -state disabled
    $main menu entryconfigure file {Save As...} -state disabled
    $main menu entryconfigure file Print... -state disabled
    $main menu entryconfigure file Close -command [mytypemethod CarefulExit]
    $main menu entryconfigure file Exit -command [mytypemethod CarefulExit]
    set frame [$main scrollwindow getframe]
    set swframe [ScrollableFrame $frame.swframe \
			-constrainedheight yes -constrainedwidth yes \
			-width [expr {$width + 15}] -height $height]
    $main scrollwindow setwidget $swframe
    set ctcpanel [::CTCPanel::CTCPanel [$swframe getframe].ctcpanel \
			-width $width -height $height]
    pack $ctcpanel -fill both -expand yes
    $main menu add view command \
		-label {Zoom In} \
		-accelerator {+} \
		-command "$ctcpanel zoomBy 2"
    set zoomMenu [menu [$main mainframe getmenu view].zoom -tearoff no]
    $main menu add view cascade \
		-label Zoom \
		-menu $zoomMenu
    $main menu add view command \
		-label {Zoom Out} \
		-accelerator {-} \
		-command "$ctcpanel zoomBy .5"
    $zoomMenu add command -label {16:1} -command "$ctcpanel setZoom 16"
    $zoomMenu add command -label {8:1} -command "$ctcpanel setZoom 8"
    $zoomMenu add command -label {4:1} -command "$ctcpanel setZoom 4"
    $zoomMenu add command -label {2:1} -command "$ctcpanel setZoom 2"
    $zoomMenu add command -label {1:1} -command "$ctcpanel setZoom 1"
    $zoomMenu add command -label {1:2} -command "$ctcpanel setZoom .5"
    $zoomMenu add command -label {1:4} -command "$ctcpanel setZoom .25"
    $zoomMenu add command -label {1:8} -command "$ctcpanel setZoom .125"
    $zoomMenu add command -label {1:16} -command "$ctcpanel setZoom .0625"

    $main showit
  }
  typemethod CarefulExit {{answer no}} {
    if {!$answer} {
      set answer [tk_messageBox -default no -icon question \
			-message {Really Quit?} -title {Careful Exit} \
			-type yesno -parent $main]
      if {$answer} {exit}
    }
  }  
}

MainWindow createwindow -name {Wendell Depot Layout} -width 1050 -height 750 -extramenus {"OpenLCB" openlcb openlcb 0 {}}
# CTCPanelObjects
MainWindow ctcpanel create Signal EastFM \
	-x 617.0 \
	-y 97.0 \
	-label {} \
	-controlpoint East_Double \
	-orientation 4 \
	-heads 1
MainWindow ctcpanel create CTCLabel Stage2_4_lab2 \
	-x 1027.0 \
	-y 263.0 \
	-controlpoint Stage_East_2_4 \
	-color white \
	-label {Stage 2-4}
MainWindow ctcpanel create SIGPlate Stage_West_1_3_Sig \
	-x 114.0 \
	-y 166.0 \
	-label {Stage West 1-3} \
	-controlpoint Stage_West_1_3 \
	-leftcommand {} \
	-centercommand {} \
	-rightcommand {}
MainWindow ctcpanel create StraightBlock Stage_2W \
	-x1 16.0 \
	-y1 110.0 \
	-x2 79.0 \
	-y2 110.0 \
	-controlpoint Stage \
	-label {} \
	-position below \
	-occupiedcommand {}
MainWindow ctcpanel create StraightBlock Stage_4E \
	-x1 911.0 \
	-y1 170.0 \
	-x2 1046.0 \
	-y2 170.0 \
	-controlpoint Stage \
	-label {} \
	-position above \
	-occupiedcommand {}
MainWindow ctcpanel create CodeButton East_Double_Track_code \
	-x 530.0 \
	-y 210.0 \
	-controlpoint East_Double \
	-command {}
MainWindow ctcpanel create CTCLabel Stage1_3_lab \
	-x 112.0 \
	-y 264.0 \
	-controlpoint Stage_West_1_3 \
	-color white \
	-label {Stage 1-3}
MainWindow ctcpanel create Signal WestExit1 \
	-x 40 \
	-y 85.0 \
	-label {} \
	-controlpoint Stage_West_1_3 \
	-orientation 0 \
	-heads 1
MainWindow ctcpanel create Signal WestExit2 \
	-x 40 \
	-y 122.0 \
	-label {} \
	-controlpoint Stage_West_2_4 \
	-orientation 0 \
	-heads 1
MainWindow ctcpanel create Signal WestExit3 \
	-x 40 \
	-y 43.0 \
	-label {} \
	-controlpoint Stage_West_1_3 \
	-orientation 0 \
	-heads 1
MainWindow ctcpanel create Signal WestExit4 \
	-x 40 \
	-y 143.0 \
	-label {} \
	-controlpoint Stage_West_2_4 \
	-orientation 0 \
	-heads 1
MainWindow ctcpanel create Signal WestF1 \
	-x 261.0 \
	-y 61.0 \
	-label {} \
	-controlpoint West_Double \
	-orientation 0 \
	-heads 1
MainWindow ctcpanel create StraightBlock Stage_3W \
	-x1 17.0 \
	-y1 55.0 \
	-x2 77.0 \
	-y2 55.0 \
	-controlpoint Stage \
	-label {} \
	-position above \
	-occupiedcommand {}
MainWindow ctcpanel create StraightBlock WestMainTrack1 \
	-x1 126.0 \
	-y1 75.0 \
	-x2 309.0 \
	-y2 75.0 \
	-controlpoint WestMain \
	-label {} \
	-position below \
	-occupiedcommand {}
MainWindow ctcpanel create SIGPlate Stage_East_2_4_Sig \
	-x 1024.0 \
	-y 166.0 \
	-label {Stage East 2-4} \
	-controlpoint Stage_East_2_4 \
	-leftcommand {} \
	-centercommand {} \
	-rightcommand {}
MainWindow ctcpanel create SWPlate Stage_West_2_4_Plate \
	-x 215.0 \
	-y 80 \
	-label {Stage West 2-4} \
	-controlpoint Stage_West_2_4 \
	-normalcommand {} \
	-reversecommand {}
MainWindow ctcpanel create StraightBlock WestMainTrack2 \
	-x1 127.0 \
	-y1 109.0 \
	-x2 311.0 \
	-y2 109.0 \
	-controlpoint WestMain \
	-label {} \
	-position below \
	-occupiedcommand {}
MainWindow ctcpanel create Signal EastExit1 \
	-x 967.0 \
	-y 99.0 \
	-label {} \
	-controlpoint Stage_East_1_3 \
	-orientation 4 \
	-heads 1
MainWindow ctcpanel create Signal EastExit2 \
	-x 968.0 \
	-y 160.0 \
	-label {} \
	-controlpoint Stage_East_2_4 \
	-orientation 4 \
	-heads 1
MainWindow ctcpanel create Switch West_Double_Track \
	-x 359.0 \
	-y 110.0 \
	-label {West Double Track} \
	-controlpoint West_Double \
	-orientation 4 \
	-flipped no \
	-statecommand {} \
	-occupiedcommand {}
MainWindow ctcpanel create Signal EastExit3 \
	-x 967.0 \
	-y 80.0 \
	-label {} \
	-controlpoint Stage_East_1_3 \
	-orientation 4 \
	-heads 1
MainWindow ctcpanel create CodeButton Stage_West_1_3_code \
	-x 114.0 \
	-y 210.0 \
	-controlpoint Stage_West_1_3 \
	-command {}
MainWindow ctcpanel create StraightBlock EastMainTrack2a \
	-x1 554.0 \
	-y1 133.0 \
	-x2 577.0 \
	-y2 149.0 \
	-controlpoint EastMain \
	-label {} \
	-position above \
	-occupiedcommand {}
MainWindow ctcpanel create Signal EastExit4 \
	-x 968.0 \
	-y 185.0 \
	-label {} \
	-controlpoint Stage_East_2_4 \
	-orientation 4 \
	-heads 1
MainWindow ctcpanel create SIGPlate West_Double_Track_Sig \
	-x 335.0 \
	-y 166.0 \
	-label {West Double Track} \
	-controlpoint West_Double \
	-leftcommand {} \
	-centercommand {} \
	-rightcommand {}
MainWindow ctcpanel create SIGPlate Stage_West_2_4_Sig \
	-x 215.0 \
	-y 166 \
	-label {Stage West 2-4} \
	-controlpoint Stage_West_2_4 \
	-leftcommand {} \
	-centercommand {} \
	-rightcommand {}
MainWindow ctcpanel create CodeButton Stage_West_2_4_Code \
	-x 215.0 \
	-y 210.0 \
	-controlpoint Stage_West_2_4 \
	-command {}
MainWindow ctcpanel create StraightBlock Stage_4W \
	-x1 16.0 \
	-y1 131.0 \
	-x2 75.0 \
	-y2 131.0 \
	-controlpoint Stage \
	-label {} \
	-position below \
	-occupiedcommand {}
MainWindow ctcpanel create StraightBlock WendellDepot \
	-x1 362.0 \
	-y1 110.0 \
	-x2 507.0 \
	-y2 110.0 \
	-controlpoint WendellDepot \
	-label {Wendell Depot} \
	-position above \
	-occupiedcommand {}
MainWindow ctcpanel create Switch Stage_East_1_3 \
	-x 872.0 \
	-y 110.0 \
	-label {Stage East 1-3} \
	-controlpoint Stage_East_1_3 \
	-orientation 0 \
	-flipped yes \
	-statecommand {} \
	-occupiedcommand {}
MainWindow ctcpanel create Switch East_Double_Track \
	-x 510.0 \
	-y 110.0 \
	-label {East Double Track} \
	-controlpoint East_Double \
	-orientation 0 \
	-flipped no \
	-statecommand {} \
	-occupiedcommand {}
MainWindow ctcpanel create SWPlate Stage_West_1_3_Plate \
	-x 113.0 \
	-y 80.0 \
	-label {Stage West 1-3} \
	-controlpoint Stage_West_1_3 \
	-normalcommand {} \
	-reversecommand {}
MainWindow ctcpanel create SIGPlate East_Double_Track_Sig \
	-x 530.0 \
	-y 166.0 \
	-label {East Double Track} \
	-controlpoint East_Double \
	-leftcommand {} \
	-centercommand {} \
	-rightcommand {}
MainWindow ctcpanel create Signal WestEN \
	-x 376.0 \
	-y 96.0 \
	-label {} \
	-controlpoint West_Double \
	-orientation 4 \
	-heads 2
MainWindow ctcpanel create CodeButton Stage_East_2_4_Code \
	-x 1026.0 \
	-y 212.0 \
	-controlpoint Stage_East_2_4 \
	-command {}
MainWindow ctcpanel create StraightBlock WestMainTrack1a \
	-x1 310.0 \
	-y1 75.0 \
	-x2 319.0 \
	-y2 89.0 \
	-controlpoint WestMain \
	-label {} \
	-position below \
	-occupiedcommand {}
MainWindow ctcpanel create CTCLabel Stage1_3_lab2 \
	-x 903.0 \
	-y 265.0 \
	-controlpoint Stage_East_1_3 \
	-color white \
	-label {Stage 1-3}
MainWindow ctcpanel create Signal EastYardEntry1-3 \
	-x 834.0 \
	-y 95.0 \
	-label {} \
	-controlpoint Stage_East_1_3 \
	-orientation 0 \
	-heads 2
MainWindow ctcpanel create Switch Stage_West_1_3 \
	-x 122.0 \
	-y 75.0 \
	-label {Stage West 1-3} \
	-controlpoint Stage_West_1_3 \
	-orientation 4 \
	-flipped no \
	-statecommand {} \
	-occupiedcommand {}
MainWindow ctcpanel create Signal EastF1 \
	-x 618.0 \
	-y 131.0 \
	-label {} \
	-controlpoint East_Double \
	-orientation 4 \
	-heads 1
MainWindow ctcpanel create CTCLabel Stage1_4_lab \
	-x 216.0 \
	-y 261.0 \
	-controlpoint Stage_West_2_4 \
	-color white \
	-label {Stage 2-4}
MainWindow ctcpanel create Signal WestFM \
	-x 261.0 \
	-y 96.0 \
	-label {} \
	-controlpoint West_Double \
	-orientation 0 \
	-heads 1
MainWindow ctcpanel create Signal WestYardEntry1-3 \
	-x 140.0 \
	-y 64.0 \
	-label {} \
	-controlpoint Stage_West_1_3 \
	-orientation 4 \
	-heads 2
MainWindow ctcpanel create StraightBlock EastMainTrack1 \
	-x1 556.0 \
	-y1 109.0 \
	-x2 867.0 \
	-y2 110.0 \
	-controlpoint EastMain \
	-label {} \
	-position above \
	-occupiedcommand {}
MainWindow ctcpanel create SWPlate East_Double_Track_Plate \
	-x 529.0 \
	-y 80.0 \
	-label {East Double Track} \
	-controlpoint East_Double \
	-normalcommand {} \
	-reversecommand {}
MainWindow ctcpanel create StraightBlock EastMainTrack2 \
	-x1 576.0 \
	-y1 148.0 \
	-x2 864.0 \
	-y2 147.0 \
	-controlpoint EastMain \
	-label {} \
	-position above \
	-occupiedcommand {}
MainWindow ctcpanel create SWPlate Stage_East_2_4_Plate \
	-x 1025.0 \
	-y 80.0 \
	-label {Stage East 2-4_Plate} \
	-controlpoint Stage_East_2_4 \
	-normalcommand {} \
	-reversecommand {}
MainWindow ctcpanel create StraightBlock Stage_1E \
	-x1 918.0 \
	-y1 110.0 \
	-x2 1040.0 \
	-y2 110.0 \
	-controlpoint Stage \
	-label {} \
	-position above \
	-occupiedcommand {}
MainWindow ctcpanel create CodeButton West_Double_Track_code \
	-x 336.0 \
	-y 210.0 \
	-controlpoint West_Double \
	-command {}
MainWindow ctcpanel create Switch Stage_East_2_4 \
	-x 866.0 \
	-y 148.0 \
	-label {Stage East 2-4} \
	-controlpoint Stage_East_2_4 \
	-orientation 0 \
	-flipped no \
	-statecommand {} \
	-occupiedcommand {}
MainWindow ctcpanel create Switch Stage_West_2_4 \
	-x 122.0 \
	-y 110.0 \
	-label {Stage West 2-4} \
	-controlpoint Stage_West_2_4 \
	-orientation 4 \
	-flipped yes \
	-statecommand {} \
	-occupiedcommand {}
MainWindow ctcpanel create Signal EastYardEntry2-4 \
	-x 835.0 \
	-y 164.0 \
	-label {} \
	-controlpoint Stage_East_2_4 \
	-orientation 0 \
	-heads 2
MainWindow ctcpanel create StraightBlock Stage_2E \
	-x1 911.0 \
	-y1 148.0 \
	-x2 1042.0 \
	-y2 148.0 \
	-controlpoint Stage \
	-label {} \
	-position above \
	-occupiedcommand {}
MainWindow ctcpanel create SWPlate Stage_East_1_3_Plate \
	-x 900.0 \
	-y 80.0 \
	-label {Stage East 1-3} \
	-controlpoint Stage_East_1_3 \
	-normalcommand {} \
	-reversecommand {}
MainWindow ctcpanel create Signal WestYardEntry2-4 \
	-x 140 \
	-y 123.0 \
	-label {} \
	-controlpoint Stage_West_2_4 \
	-orientation 4 \
	-heads 2
MainWindow ctcpanel create Signal EastEN \
	-x 487.0 \
	-y 124.0 \
	-label {} \
	-controlpoint East_Double \
	-orientation 0 \
	-heads 2
MainWindow ctcpanel create StraightBlock Stage_1W \
	-x1 16.0 \
	-y1 75.0 \
	-x2 79.0 \
	-y2 75.0 \
	-controlpoint Stage \
	-label {} \
	-position above \
	-occupiedcommand {}
MainWindow ctcpanel create StraightBlock Stage_3E \
	-x1 917.0 \
	-y1 90.0 \
	-x2 1041.0 \
	-y2 90.0 \
	-controlpoint Stage \
	-label {} \
	-position above \
	-occupiedcommand {}
MainWindow ctcpanel create SIGPlate Stage_East_1_3_Sig \
	-x 900.0 \
	-y 166.0 \
	-label {Stage East 1-3} \
	-controlpoint Stage_East_1_3 \
	-leftcommand {} \
	-centercommand {} \
	-rightcommand {}
MainWindow ctcpanel create CodeButton Stage_East_1_3_Code \
	-x 901.0 \
	-y 211.0 \
	-controlpoint Stage_East_1_3 \
	-command {}
MainWindow ctcpanel create SWPlate West_Double_Track_Plate \
	-x 335.0 \
	-y 80 \
	-label {West Double Track_Plate} \
	-controlpoint West_Double \
	-normalcommand {} \
	-reversecommand {}
#*****************************************************************************
#
#  System        : 
#  Module        : 
#  Object Name   : $RCSfile$
#  Revision      : $Revision$
#  Date          : $Date$
#  Author        : $Author$
#  Created By    : Robert Heller
#  Created       : Sat Aug 20 09:20:52 2016
#  Last Modified : <250215.2138>
#
#  Description	
#
#  Notes
#
#  History
#	
#*****************************************************************************
#
#    Copyright (C) 2016  Robert Heller D/B/A Deepwoods Software
#			51 Locke Hill Road
#			Wendell, MA 01379-9728
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# 
#
#*****************************************************************************


package require snit
package require LCC
package require LCCNodeTree
package require LCCTrafficMonitor
package require EventDialogs
package require CTCPanel 2.0

snit::type Dispatcher_Block {
    option -openlcb -type ::OpenLCB_Dispatcher -readonly yes
    option -name    -default {}
    option -occupiedeventid -type lcc::EventID_or_null -default {}
    option -notoccupiedeventid -type lcc::EventID_or_null -default {}
    variable occupied no

    constructor {args} {
        $self configurelist $args
        MainWindow ctcpanel itemconfigure "$options(-name)" \
              -occupiedcommand [mymethod occupiedp]
    }
    method occupiedp {} {return $occupied}
    method consumerP {} {return yes}
    method producerP {} {return no}
    method consumedEvents {} {
        set events [list]
        foreach eopt {occupiedeventid notoccupiedeventid} {
            set ev [$self cget -$eopt]
            if {$ev eq {}} {continue}
            lappend events $ev
        }
        return $events
    }
    method producedEvents {} {return [list]}
    method consumeEvent {event} {
        set ev [$self cget -occupiedeventid]
        if {$ev ne {} && [$ev match $event]} {
            set occupied yes
        }
        set ev [$self cget -notoccupiedeventid]
        if {$ev ne {} && [$ev match $event]} {
            set occupied no
        }
        MainWindow ctcpanel invoke "$options(-name)"
    }
}

snit::type Dispatcher_Switch {
    option -openlcb -type ::OpenLCB_Dispatcher -readonly yes
    option -name    -default {}
    option -occupiedeventid -type lcc::EventID_or_null -default {}
    option -notoccupiedeventid -type lcc::EventID_or_null -default {}
    variable occupied no
    option -statenormaleventid -type lcc::EventID_or_null -default {}
    option -statereverseeventid -type lcc::EventID_or_null -default {}
    variable state unknown
    constructor {args} {
        $self configurelist $args
        MainWindow ctcpanel itemconfigure "$options(-name)" \
              -occupiedcommand [mymethod occupiedp] \
              -statecommand    [mymethod getstate]
    }
    method occupiedp {} {return $occupied}
    method getstate  {} {return $state}
    method consumerP {} {return yes}
    method producerP {} {return no}
    method consumedEvents {} {
        set events [list]
        foreach eopt {occupiedeventid notoccupiedeventid statenormaleventid 
                      statereverseeventid} {
            set ev [$self cget -$eopt]
            if {$ev eq {}} {continue}
            lappend events $ev
        }
        return $events
    }
    method producedEvents {} {return [list]}
    method consumeEvent {event} {
        set ev [$self cget -occupiedeventid]
        if {$ev ne {} && [$ev match $event]} {
            set occupied yes
        }
        set ev [$self cget -notoccupiedeventid]
        if {$ev ne {} && [$ev match $event]} {
            set occupied no
        }
        set ev [$self cget -statenormaleventid]
        if {$ev ne {} && [$ev match $event]} {
            set state normal
        }
        set ev [$self cget -statereverseeventid]
        if {$ev ne {} && [$ev match $event]} {
            set state reverse
        }
        MainWindow ctcpanel invoke "$options(-name)"
    }
}

snit::enum CTC_AspectColors -values {dark red yellow green white blue}

snit::listtype CTC_AspectList -type CTC_AspectColors
    
snit::type CTC_EventAspectList {
    pragma  -hastypeinfo no -hastypedestroy no -hasinstances no
    typemethod validate {object} {
        if {([llength $object] & 1) != 0} {
            if {([llength $object] & 1) != 0} {
                error [_ "Not an CTC_EventAspectList: %s (odd list length)" $object]
            } else {
                foreach {e al} $object {
                    if {[catch {lcc::EventID validate $e}]} {
                        error [_ "Not an CTC_EventAspectList: %s (badevent: %s)" $object $e]
                    }
                }
                if {[catch {CTC_AspectList validate $al}]} {
                    error [_ "Not an CTC_EventAspectList: %s (bad AspectArgumentList: %s)" $object $al]
                }
            }
        }
        return $object
    }
}



snit::type Dispatcher_Signal {
    option -openlcb -type ::OpenLCB_Dispatcher -readonly yes
    option -name    -default {}
    option -eventidaspectlist -type CTC_EventAspectList -default {}
    constructor {args} {
        $self configurelist $args
    }
    method consumerP {} {return yes}
    method producerP {} {return no}    
    method consumedEvents {} {
        set events [list]
        foreach {ev aspl} [$self cget -eventidaspectlist] {
            lappend events $ev
        }
        return $events
    }
    method producedEvents {} {return [list]}
    method consumeEvent {event} {
        foreach {ev aspl} [$self cget -eventidaspectlist] {
            if {[$ev match $event]} {
                MainWindow ctcpanel setv "$options(-name)" "$aspl"
            }
        }
    }
}


snit::type Dispatcher_CodeButton {
    option -openlcb -type ::OpenLCB_Dispatcher -readonly yes
    option -name    -default {}
    option -eventid -type lcc::EventID_or_null -default {}
    constructor {args} {
        $self configurelist $args
        MainWindow ctcpanel itemconfigure "$options(-name)" \
              -command [mymethod code]
    }
    method consumerP {} {return no}
    method producerP {} {return yes}    
    method consumedEvents {} {return [list]}
    method producedEvents {} {
        set events [list]
        set ev [$self cget -eventid]
        if {$ev ne ""} {lappend events $ev}
        return $events
    }
    method code {} {
        set cp [MainWindow ctcpanel itemcget [$self cget -name] -controlpoint]
        set ev [$self cget -eventid]
        if {$ev ne ""} {
            [$self cget -openlcb] sendMyEvent $ev
        }
        foreach swp [MainWindow ctcpanel objectlist $cp SwitchPlates] {
            MainWindow ctcpanel invoke $swp
        }
        foreach sgp [MainWindow ctcpanel objectlist $cp SignalPlates] {
            MainWindow ctcpanel invoke $sgp
        }
        foreach tog [MainWindow ctcpanel objectlist $cp Toggles] {
            MainWindow ctcpanel invoke $tog
        }
        foreach push [MainWindow ctcpanel objectlist $cp PushButtons] {
            MainWindow ctcpanel invoke $push
        }
    }
}

snit::type Dispatcher_Lamp {
    option -openlcb -type ::OpenLCB_Dispatcher -readonly yes
    option -name    -default {}
    option -oneventid  -type lcc::EventID_or_null -default {}
    option -offeventid -type lcc::EventID_or_null -default {}
    constructor {args} {
        $self configurelist $args
    }
    method consumerP {} {return yes}
    method producerP {} {return no}
    method consumedEvents {} {
        set events [list]
        foreach eopt {oneventid offeventid} {
            set ev [$self cget -$eopt]
            if {$ev ne ""} {lappend events $ev}
        }
        return $events
    }
    method producedEvents {} {return [list]}
    method consumeEvent {event} {
        set ev [$self cget -oneventid]
        if {$ev ne "" && [$ev match $event]} {
            MainWindow ctcpanel setv "$options(-name)" on
        }
        set ev [$self cget -offeventid]
        if {$ev ne "" && [$ev match $event]} {
            MainWindow ctcpanel setv "$options(-name)" off
        }
    }
}

snit::type Dispatcher_ToggleSwitch {
    option -openlcb -type ::OpenLCB_Dispatcher -readonly yes
    option -name    -default {}
    option -lefteventid   -type lcc::EventID_or_null -default {}
    option -righteventid  -type lcc::EventID_or_null -default {}
    option -centereventid -type lcc::EventID_or_null -default {}
    constructor {args} {
        $self configurelist $args
        MainWindow ctcpanel itemconfigure "$options(-name)" \
              -leftcommand [mymethod sendevent -lefteventid] \
              -rightcommand [mymethod sendevent -righteventid] \
              -centercommand [mymethod sendevent -centereventid]
    }
    method sendevent {eopt} {
        set ev [$self cget $eopt]
        if {$ev ne ""} {
            [$self cget -openlcb] sendMyEvent $ev
        }
    }
    method consumerP {} {return no}
    method producerP {} {return yes}
    method consumedEvents {} {return [list]}
    method producedEvents {} {
        set events [list]
        foreach eopt {lefteventid righteventid centereventid} {
            set ev [$self cget -$eopt]
            if {$ev ne ""} {lappend events $ev}
        }
        return $events
    }
    method consumeEvent {event} {}
}

snit::type Dispatcher_PushButton {
    option -openlcb -type ::OpenLCB_Dispatcher -readonly yes
    option -name    -default {}
    option -eventid -type lcc::EventID_or_null -default {}
    constructor {args} {
        $self configurelist $args
        MainWindow ctcpanel itemconfigure "$options(-name)" \
              -command [mymethod sendevent -eventid]
    }
    method sendevent {eopt} {
        set ev [$self cget $eopt]
        if {$ev ne ""} {
            [$self cget -openlcb] sendMyEvent $ev
        }
    }
    method consumerP {} {return no}
    method producerP {} {return yes}
    method consumedEvents {} {return [list]}
    method producedEvents {} {
        set events [list]
        set ev [$self cget -eventid]
        if {$ev ne ""} {lappend events $ev}
        return $events
    }
    method consumeEvent {event} {}
}

snit::type Dispatcher_SwitchPlate {
    option -openlcb -type ::OpenLCB_Dispatcher -readonly yes
    option -name    -default {}
    option -normaleventid   -type lcc::EventID_or_null -default {}
    option -reverseeventid  -type lcc::EventID_or_null -default {}
    option -normalindonev   -type lcc::EventID_or_null -default {}
    option -normalindoffev  -type lcc::EventID_or_null -default {}
    option -centerindonev   -type lcc::EventID_or_null -default {}
    option -centerindoffev  -type lcc::EventID_or_null -default {}
    option -reverseindonev  -type lcc::EventID_or_null -default {}
    option -reverseindoffev -type lcc::EventID_or_null -default {}
    constructor {args} {
        $self configurelist $args
        MainWindow ctcpanel itemconfigure "$options(-name)" \
              -normalcommand [mymethod sendevent -normaleventid] \
              -reversecommand [mymethod sendevent -reverseeventid]
    }
    method sendevent {eopt} {
        set ev [$self cget $eopt]
        if {$ev ne ""} {
            [$self cget -openlcb] sendMyEvent $ev
        }
    }
    method consumerP {} {return yes}
    method producerP {} {return yes}
    method consumedEvents {} {
        set events [list]
        foreach eopt {normalindonev normalindoffev centerindonev 
                      centerindoffev reverseindonev reverseindoffev} {
            set ev [$self cget -$eopt]
            if {$ev ne ""} {lappend events $ev}
        }
    }
    method producedEvents {} {
        set events [list]
        foreach eopt {normaleventid reverseeventid} {
            set ev [$self cget -$eopt]
            if {$ev ne ""} {lappend events $ev}
        }
        return $events
    }
    method consumeEvent {event} {
        set ev [$self cget -normalindonev]
        if {$ev ne "" && [$ev match $event]} {
            MainWindow ctcpanel seti "$options(-name)" N on
        }
        set ev [$self cget -normalindoffev]
        if {$ev ne "" && [$ev match $event]} {
            MainWindow ctcpanel seti "$options(-name)" N off
        }
        set ev [$self cget -centerindonev]
        if {$ev ne "" && [$ev match $event]} {
            MainWindow ctcpanel seti "$options(-name)" C on
        }
        set ev [$self cget -centerindoffev]
        if {$ev ne "" && [$ev match $event]} {
            MainWindow ctcpanel seti "$options(-name)" C off
        }
        set ev [$self cget -reverseindonev]
        if {$ev ne "" && [$ev match $event]} {
            MainWindow ctcpanel seti "$options(-name)" R on
        }
        set ev [$self cget -reverseindoffev]
        if {$ev ne "" && [$ev match $event]} {
            MainWindow ctcpanel seti "$options(-name)" R off
        }
    }
}

snit::type Dispatcher_SignalPlate {
    option -openlcb -type ::OpenLCB_Dispatcher -readonly yes
    option -name    -default {}
    option -lefteventid     -type lcc::EventID_or_null -default {}
    option -centereventid   -type lcc::EventID_or_null -default {}
    option -righteventid    -type lcc::EventID_or_null -default {}
    option -leftindonev     -type lcc::EventID_or_null -default {}
    option -leftindoffev    -type lcc::EventID_or_null -default {}
    option -centerindonev   -type lcc::EventID_or_null -default {}
    option -centerindoffev  -type lcc::EventID_or_null -default {}
    option -rightindonev  -type lcc::EventID_or_null -default {}
    option -rightindoffev -type lcc::EventID_or_null -default {}
    
    constructor {args} {
        $self configurelist $args
        MainWindow ctcpanel itemconfigure "$options(-name)" \
              -leftcommand [mymethod sendevent -lefteventid] \
              -centercommand [mymethod sendevent -centereventid] \
              -rightcommand [mymethod sendevent -righteventid]
    }
    method sendevent {eopt} {
        set ev [$self cget $eopt]
        if {$ev ne ""} {
            [$self cget -openlcb] sendMyEvent $ev
        }
    }
    method consumerP {} {return yes}
    method producerP {} {return yes}
    method consumedEvents {} {
        set events [list]
        foreach eopt {leftindonev leftindoffev centerindonev 
                      centerindoffev rightindonev rightindoffev} {
            set ev [$self cget -$eopt]
            if {$ev ne ""} {lappend events $ev}
        }
    }
    method producedEvents {} {
        set events [list]
        foreach eopt {lefteventid righteventid centereventid} {
            set ev [$self cget -$eopt]
            if {$ev ne ""} {lappend events $ev}
        }
        return $events
    }
    method consumeEvent {event} {
        set ev [$self cget -leftindonev]
        if {$ev ne "" && [$ev match $event]} {
            MainWindow ctcpanel seti "$options(-name)" L on
        }
        set ev [$self cget -leftindoffev]
        if {$ev ne "" && [$ev match $event]} {
            MainWindow ctcpanel seti "$options(-name)" L off
        }
        set ev [$self cget -centerindonev]
        if {$ev ne "" && [$ev match $event]} {
            MainWindow ctcpanel seti "$options(-name)" C on
        }
        set ev [$self cget -centerindoffev]
        if {$ev ne "" && [$ev match $event]} {
            MainWindow ctcpanel seti "$options(-name)" C off
        }
        set ev [$self cget -rightindonev]
        if {$ev ne "" && [$ev match $event]} {
            MainWindow ctcpanel seti "$options(-name)" R on
        }
        set ev [$self cget -rightindoffev]
        if {$ev ne "" && [$ev match $event]} {
            MainWindow ctcpanel seti "$options(-name)" R off
        }
    }
}

snit::type Dispatcher_UserCodeModule {
    option -openlcb -type ::OpenLCB_Dispatcher -readonly yes
    option -name    -default {}
    option -usermoduleconstructor -readonly yes
    component usermodule -inherit yes
    constructor {args} {
        set options(-openlcb) [from args -openlcb]
        set options(-name) [from args -name]
        set options(-usermoduleconstructor) [from args -usermoduleconstructor]
        install usermodule using $options(-usermoduleconstructor) %AUTO% \
              -openlcb $options(-openlcb) \
              -name $options(-name) \
              {*}$args
    }
}


snit::enum ElementClasses -values {Block Switch Signal CodeButton Lamp 
    ToggleSwitch SwitchPlate SignalPlate 
    PushButton UserCodeModule}

snit::type OpenLCB_Dispatcher {
    ## OpenLCB Interface code for Dispatcher panels
    #
    # The typemethods implement the interface to the OpenLCB network, and the
    # instances implement the interface to Dispatcher panel elements. The
    # instances use a helper type to implement a specific Dispatcher panel 
    # element type.
    # 
    #
    
    typecomponent transport; #        Transport layer
    typevariable  elelist {};#        List of elements
    typemethod GetElementByName {name} {
        foreach e $elelist {
            if {[$e cget -name] eq $name} {
                return $e
            }
        }
        return {}
    }
    typemethod GetElementByType {eleclasstype} {
        ElementClasses validate $eleclasstype
        set result [list]
        foreach e $elelist {
            if {[$e cget -eleclasstype] eq $eleclasstype} {
                lappend result $e
            }
        }
        return $result
    }
    typevariable  consumers {};#      Element instances that consume events
    typevariable  eventsconsumed {};# Events consumed.
    typevariable  producers {};#      Element instances that produce events
    typevariable  eventsproduced {};# Events produced.
    typevariable  eventlogging no;#   Event logging
    typecomponent eventlog;#          Event log window
    typecomponent nodetreetop;#       Node Tree toplevel
    typecomponent nodetreemain;#      Node Tree Main window
    typecomponent nodetree;#          Node Tree
    
    typeconstructor {
        set eventlog {}
        set nodetree {}
        set nodetreemain {}
        set nodetreetop {}
    }

    typemethod PopulateOpenLCBMenu {} {
        MainWindow main menu add openlcb checkbutton \
              -label [_m {Menu|OpenLCB|Event Logging}] \
              -variable [mytypevar eventlogging] \
              -onvalue yes -offvalue no
        MainWindow main menu add openlcb command \
              -label [_m {Menu|OpenLCB|Open Eventlog}] \
              -command [mytypemethod _OpenEventlog]
        MainWindow main menu add openlcb command \
              -label [_m {Menu|OpenLCB|Open Node Tree}] \
              -command [mytypemethod _OpenNodeTree]
        MainWindow main menu add openlcb command \
              -label [_m {Menu|OpenLCB|Open LCC Traffic Monitor}] \
              -command [mytypemethod _OpenTrafficMonitor]
    }
    
    typemethod _OpenTrafficMonitor {} {
        LCCTrafficMonitor Open .trafficMonitor -transport $transport
    }
        
    typemethod _OpenEventlog {} {
        if {![winfo exists $eventlog]} {
            set eventlog [lcc::EventLog .eventlog%AUTO% \
                          -transport $transport \
                          -localeventhandler [mytypemethod _localeventhandler]]
        }
        $eventlog open
    }
    typemethod _OpenNodeTree {} {
        if {![winfo exists $nodetree]} {
            catch {.nodetreetop destroy}
            set nodetreetop [toplevel .nodetreetop]
            set nodetreemain [mainwindow $nodetreetop.main -scrolling yes \
                              -height 480 -width 640 \
                              -menu [subst {
                                     "[_m {Menu|&File}]" {file:menu} {file} 0 {
                                         {command "[_m {Menu|File|&Close}]" 
                                             {file:close} 
                                             "[_ {Close the Node Tree}]" 
                                             {Ctrl c} 
                                             -command "[mytypemethod _closeNodeTree]"}}}]]
            pack $nodetreemain -expand yes -fill both
            wm protocol $nodetreetop WM_DELETE_WINDOW \
                  [mytypemethod _closeNodeTree]
            set nodetree [LCCNodeTree [$nodetreemain scrollwindow getframe].nodetree \
                          -transport $transport]
            $nodetreemain scrollwindow setwidget $nodetree
            $nodetreemain toolbar add topbuttons
            $nodetreemain toolbar addbutton topbuttons refresh -text [_m "Label|Refresh"] -command [list $nodetree Refresh]
            $nodetreemain toolbar show topbuttons
            
        }
        $nodetreemain showit
    }
    typemethod _closeNodeTree {} {
        if {[winfo exists $nodetree]} {
            wm withdraw $nodetreetop
        }
    }
    typemethod ConnectToOpenLCB {args} {
        #puts stderr "*** $type ConnectToOpenLCB $args"
        set transportConstructors [info commands ::lcc::[from args -transport]]
        if {[llength $transportConstructors] > 0} {
            set transportConstructor [lindex $transportConstructors 0]
        }
        if {$transportConstructor eq {}} {
            error [_ "No valid transport constructor found!"]
            exit 96
        }
        set name [from args -name]
        set description [from args -description]
        if {[catch {lcc::OpenLCBNode %AUTO% \
                          -transport $transportConstructor \
                          -eventhandler [mytypemethod _eventHandler] \
                          -generalmessagehandler [mytypemethod _messageHandler] \
                          -softwaremodel "Dispatcher Panel" \
                          -softwareversion "1.0" \
                          -nodename $name \
                          -nodedescription $description \
                          -additionalprotocols {EventExchange} \
                          {*}$args} transport]} {
            error [_ "Could not open OpenLCBNode: %s" $transport]
            exit 95
        }
        $transport SendVerifyNodeID
        $transport IdentifyEvents
        #puts stderr "*** $type ConnectToOpenLCB: transport = $transport"
    }
    typemethod SendMyEvents {} {
        foreach ev $eventsconsumed {
            $transport ConsumerIdentified $ev unknown
        }
        foreach ev $eventsproduced {
            $transport ProducerIdentified $ev unknown
        }
    }
    typemethod sendEvent {event} {
        #** Send an event, after first checking for local consumtion.
        #
        # @param event The event to process
        
        foreach c $consumers {
            $c consumeEvent $event
        }
        $transport ProduceEvent $event
    }
    typemethod _eventHandler {command eventid {validity {}}} {
        #* Event Exchange handler.  Handle Event Exchange messages.
        #
        # @param command The type of event operation.
        # @param eventid The eventid.
        # @param validity The validity of the event.
        
        #puts stderr "*** $type _eventHandler $command $eventid $validity"
        switch $command {
            consumerrangeidentified {
            }
            consumeridentified {
            }
            producerrangeidentified {
            }
            produceridentified {
                if {$validity eq "valid"} {
                    foreach c $consumers {
                        #puts stderr "*** $type _eventHandler: c is $c"
                        #puts stderr "*** $type _eventHandler: event is [$eventid cget -eventidstring]"
                        $c consumeEvent $eventid
                        
                    }
                    if {$eventlogging} {
                        if {![winfo exists $eventlog]} {
                            set eventlog [lcc::EventLog .eventlog%AUTO% \
                                          -transport $transport]
                        }
                        $eventlog eventReceived $eventid
                        $eventlog open
                    }
                }
            }
            learnevents {
            }
            identifyconsumer {
                foreach ev $eventsconsumed {
                    if {[$eventid match $ev]} {
                        $transport ConsumerIdentified $ev unknown
                    }
                }
            }
            identifyproducer {
                foreach ev $eventsproduced {
                    if {[$eventid match $ev]} {
                        $transport ProducerIdentified $ev unknown
                    }
                }
            }
            identifyevents {
                foreach ev $eventsconsumed {
                    $transport ConsumerIdentified $ev unknown
                }
                foreach ev $eventsproduced {
                    $transport ProducerIdentified $ev unknown
                }
            }
            report {
                #puts stderr "*** $type _eventHandler: consumers is $consumers"
                foreach c $consumers {
                    #puts stderr "*** $type _eventHandler: c is $c"
                    #puts stderr "*** $type _eventHandler: event is [$eventid cget -eventidstring]"
                    $c consumeEvent $eventid
                    
                }
                if {$eventlogging} {
                    if {![winfo exists $eventlog]} {
                        set eventlog [lcc::EventLog .eventlog%AUTO% \
                                      -transport $transport]
                    }
                    $eventlog eventReceived $eventid
                    $eventlog open
                }
            }
        }
    }
    typemethod _localeventhandler {eventid} {
        #* Local Event handler.  Handle local Events from the event log dialog.
        #
        # @param eventid The eventid.
        
        foreach c $consumers {
            #puts stderr "*** $type _localeventhandler: c is $c"
            #puts stderr "*** $type _localeventhandler: event is [$eventid cget -eventidstring]"
            $c consumeEvent $eventid
        }
    }
    typemethod _messageHandler {message} {
        #** General message handler.
        #
        # @param message The OpenLCB message
        
        switch [format {0x%04X} [$message cget -mti]] {
            0x0490 -
            0x0488 {
                #* Verify Node ID
                $transport SendMyNodeVerifcation
            }
            0x0828 {
                #* Protocol Support Inquiry
                $transport SendMySupportedProtocols [$message cget -sourcenid]
            }
            0x0DE8 {
                #* Simple Node Information Request
                $transport SendMySimpleNodeInfo [$message cget -sourcenid]
            }
            default {
            }
        }
        if {[winfo exists $nodetree]} {
            $nodetree messageHandler $message
        }
    }
    
    typemethod validate {object} {
        if {[catch {$object info type} otype]} {
            error [_ "Not an OpenLCB_Dispatcher: %s" $object]
        } elseif {$otype ne $type} {
            error [_ "Not an OpenLCB_Dispatcher: %s" $object]
        } else {
            return $object
        }
    }
    
    component elehandler -inherit yes;# Element handler object.
    option -eleclasstype -type ElementClasses -readonly yes
    option -description -readonly yes -default {}
    
    constructor {args} {
        #** Construct a LCC Node element instance
        #
        # @param ... Options:
        # @arg -eleclasstype The I/O class.  Readonly, no default.
        # @par Additional options from the I/O class.
        
        #puts stderr "*** $type create $self $args"
        set options(-eleclasstype) [from args -eleclasstype]
        #puts stderr "*** $type create $self: options(-eleclasstype) = $options(-eleclasstype)"
        set options(-description) [from args -description]
        #puts stderr "*** $type create $self: options(-description) is '$options(-description)'"
        set classconstructor Dispatcher_$options(-eleclasstype)
        install elehandler using $classconstructor %AUTO% -openlcb $self \
              {*}$args
        lappend elelist $self
        if {[$self consumerP]} {
            lappend consumers $self
            foreach ev [$self consumedEvents] {
                lappend eventsconsumed $ev
            }
        }
        if {[$self producerP]} {
            lappend producers $self
            foreach ev [$self producedEvents] {
                lappend eventsproduced $ev
            }
        }
        
    }
    method sendMyEvent {eventid} {
        $type sendEvent $eventid
    }
}

OpenLCB_Dispatcher PopulateOpenLCBMenu
OpenLCB_Dispatcher ConnectToOpenLCB -transport CANGridConnectOverTcp -port 12021 -nid 05:01:01:01:22:89 -host fruitloops.deepsoft.com -name {Wendell Depot Layout} -description {WendellDepot.tcl}
# OpenLCB_Dispatcher Nodes
# OpenLCB_Dispatcher EastFM -eleclasstype Signal -eventidaspectlist {05.01.01.01.22.82.00.60 red 05.01.01.01.22.82.00.61 yellow 05.01.01.01.22.82.00.62 green}
OpenLCB_Dispatcher create %AUTO% -name EastFM \
	-eleclasstype Signal \
	-eventidaspectlist [list \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.82.00.60}] \
{red} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.82.00.61}] \
{yellow} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.82.00.62}] \
{green} \
	]
# OpenLCB_Dispatcher Stage_West_1_3_Sig -eleclasstype SignalPlate
OpenLCB_Dispatcher create %AUTO% -name Stage_West_1_3_Sig \
	-eleclasstype SignalPlate \

# OpenLCB_Dispatcher Stage_4E -eleclasstype Block
OpenLCB_Dispatcher create %AUTO% -name Stage_4E \
	-eleclasstype Block \

# OpenLCB_Dispatcher Stage_2W -eleclasstype Block
OpenLCB_Dispatcher create %AUTO% -name Stage_2W \
	-eleclasstype Block \

# OpenLCB_Dispatcher East_Double_Track_code -eleclasstype CodeButton
OpenLCB_Dispatcher create %AUTO% -name East_Double_Track_code \
	-eleclasstype CodeButton \

# OpenLCB_Dispatcher WestExit1 -eleclasstype Signal -eventidaspectlist {05.01.01.01.22.83.00.84 red 05.01.01.01.22.83.00.85 green}
OpenLCB_Dispatcher create %AUTO% -name WestExit1 \
	-eleclasstype Signal \
	-eventidaspectlist [list \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.84}] \
{red} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.85}] \
{green} \
	]
# OpenLCB_Dispatcher WestExit2 -eleclasstype Signal -eventidaspectlist {05.01.01.01.22.83.00.88 red 05.01.01.01.22.83.00.89 green}
OpenLCB_Dispatcher create %AUTO% -name WestExit2 \
	-eleclasstype Signal \
	-eventidaspectlist [list \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.88}] \
{red} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.89}] \
{green} \
	]
# OpenLCB_Dispatcher WestExit3 -eleclasstype Signal -eventidaspectlist {05.01.01.01.22.83.00.80 red 05.01.01.01.22.83.00.81 green}
OpenLCB_Dispatcher create %AUTO% -name WestExit3 \
	-eleclasstype Signal \
	-eventidaspectlist [list \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.80}] \
{red} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.81}] \
{green} \
	]
# OpenLCB_Dispatcher WestExit4 -eleclasstype Signal -eventidaspectlist {05.01.01.01.22.83.00.C0 red 05.01.01.01.22.83.00.C1 green}
OpenLCB_Dispatcher create %AUTO% -name WestExit4 \
	-eleclasstype Signal \
	-eventidaspectlist [list \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.C0}] \
{red} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.C1}] \
{green} \
	]
# OpenLCB_Dispatcher WestF1 -eleclasstype Signal -eventidaspectlist {05.01.01.01.22.81.00.60 red 05.01.01.01.22.81.00.61 yellow 05.01.01.01.22.81.00.62 green}
OpenLCB_Dispatcher create %AUTO% -name WestF1 \
	-eleclasstype Signal \
	-eventidaspectlist [list \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.81.00.60}] \
{red} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.81.00.61}] \
{yellow} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.81.00.62}] \
{green} \
	]
# OpenLCB_Dispatcher Stage_3W -eleclasstype Block
OpenLCB_Dispatcher create %AUTO% -name Stage_3W \
	-eleclasstype Block \

# OpenLCB_Dispatcher WestMainTrack1 -eleclasstype Block
OpenLCB_Dispatcher create %AUTO% -name WestMainTrack1 \
	-eleclasstype Block \

# OpenLCB_Dispatcher Stage_East_2_4_Sig -eleclasstype SignalPlate
OpenLCB_Dispatcher create %AUTO% -name Stage_East_2_4_Sig \
	-eleclasstype SignalPlate \

# OpenLCB_Dispatcher Stage_West_2_4_Plate -eleclasstype SwitchPlate -normaleventid 05.01.01.01.22.83.00.32 -reverseeventid 05.01.01.01.22.83.00.33 -normalindonev 05.01.01.01.22.83.00.50 -normalindoffev 05.01.01.01.22.83.00.51 -reverseindonev 05.01.01.01.22.83.00.51 -reverseindoffev 05.01.01.01.22.83.00.50
OpenLCB_Dispatcher create %AUTO% -name Stage_West_2_4_Plate \
	-eleclasstype SwitchPlate \
	-normaleventid [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.32}] \
	-reverseeventid [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.33}] \
	-normalindonev [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.50}] \
	-normalindoffev [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.51}] \
	-reverseindonev [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.51}] \
	-reverseindoffev [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.50}]
# OpenLCB_Dispatcher WestMainTrack2 -eleclasstype Block
OpenLCB_Dispatcher create %AUTO% -name WestMainTrack2 \
	-eleclasstype Block \

# OpenLCB_Dispatcher EastExit1 -eleclasstype Signal -eventidaspectlist {05.01.01.01.22.83.00.F8 red 05.01.01.01.22.83.00.F9 green}
OpenLCB_Dispatcher create %AUTO% -name EastExit1 \
	-eleclasstype Signal \
	-eventidaspectlist [list \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.F8}] \
{red} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.F9}] \
{green} \
	]
# OpenLCB_Dispatcher EastExit2 -eleclasstype Signal -eventidaspectlist {05.01.01.01.22.83.00.F4 red 05.01.01.01.22.83.00.F5 green}
OpenLCB_Dispatcher create %AUTO% -name EastExit2 \
	-eleclasstype Signal \
	-eventidaspectlist [list \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.F4}] \
{red} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.F5}] \
{green} \
	]
# OpenLCB_Dispatcher West_Double_Track -eleclasstype Switch -statenormaleventid 05.01.01.01.22.81.00.30 -statereverseeventid 05.01.01.01.22.81.00.31
OpenLCB_Dispatcher create %AUTO% -name West_Double_Track \
	-eleclasstype Switch \
	-statenormaleventid [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.81.00.30}] \
	-statereverseeventid [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.81.00.31}]
# OpenLCB_Dispatcher EastExit3 -eleclasstype Signal -eventidaspectlist {05.01.01.01.22.83.00.FC red 05.01.01.01.22.83.00.FD green}
OpenLCB_Dispatcher create %AUTO% -name EastExit3 \
	-eleclasstype Signal \
	-eventidaspectlist [list \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.FC}] \
{red} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.FD}] \
{green} \
	]
# OpenLCB_Dispatcher Stage_West_1_3_code -eleclasstype CodeButton
OpenLCB_Dispatcher create %AUTO% -name Stage_West_1_3_code \
	-eleclasstype CodeButton \

# OpenLCB_Dispatcher EastMainTrack2a -eleclasstype Block
OpenLCB_Dispatcher create %AUTO% -name EastMainTrack2a \
	-eleclasstype Block \

# OpenLCB_Dispatcher EastExit4 -eleclasstype Signal -eventidaspectlist {05.01.01.01.22.83.00.F0 red 05.01.01.01.22.83.00.F1 green}
OpenLCB_Dispatcher create %AUTO% -name EastExit4 \
	-eleclasstype Signal \
	-eventidaspectlist [list \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.F0}] \
{red} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.F1}] \
{green} \
	]
# OpenLCB_Dispatcher West_Double_Track_Sig -eleclasstype SignalPlate
OpenLCB_Dispatcher create %AUTO% -name West_Double_Track_Sig \
	-eleclasstype SignalPlate \

# OpenLCB_Dispatcher Stage_West_2_4_Code -eleclasstype CodeButton
OpenLCB_Dispatcher create %AUTO% -name Stage_West_2_4_Code \
	-eleclasstype CodeButton \

# OpenLCB_Dispatcher Stage_West_2_4_Sig -eleclasstype SignalPlate
OpenLCB_Dispatcher create %AUTO% -name Stage_West_2_4_Sig \
	-eleclasstype SignalPlate \

# OpenLCB_Dispatcher Stage_4W -eleclasstype Block
OpenLCB_Dispatcher create %AUTO% -name Stage_4W \
	-eleclasstype Block \

# OpenLCB_Dispatcher WendellDepot -eleclasstype Block
OpenLCB_Dispatcher create %AUTO% -name WendellDepot \
	-eleclasstype Block \

# OpenLCB_Dispatcher Stage_East_1_3 -eleclasstype Switch -statenormaleventid 05.01.01.01.22.84.00.30 -statereverseeventid 05.01.01.01.22.84.00.31
OpenLCB_Dispatcher create %AUTO% -name Stage_East_1_3 \
	-eleclasstype Switch \
	-statenormaleventid [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.84.00.30}] \
	-statereverseeventid [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.84.00.31}]
# OpenLCB_Dispatcher East_Double_Track -eleclasstype Switch -statenormaleventid 05.01.01.01.22.82.00.30 -statereverseeventid 05.01.01.01.22.82.00.31
OpenLCB_Dispatcher create %AUTO% -name East_Double_Track \
	-eleclasstype Switch \
	-statenormaleventid [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.82.00.30}] \
	-statereverseeventid [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.82.00.31}]
# OpenLCB_Dispatcher Stage_West_1_3_Plate -eleclasstype SwitchPlate -normaleventid 05.01.01.01.22.83.00.30 -reverseeventid 05.01.01.01.22.83.00.31 -normalindonev 05.01.01.01.22.83.00.50 -normalindoffev 05.01.01.01.22.83.00.51 -reverseindonev 05.01.01.01.22.83.00.51 -reverseindoffev 05.01.01.01.22.83.00.50
OpenLCB_Dispatcher create %AUTO% -name Stage_West_1_3_Plate \
	-eleclasstype SwitchPlate \
	-normaleventid [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.30}] \
	-reverseeventid [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.31}] \
	-normalindonev [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.50}] \
	-normalindoffev [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.51}] \
	-reverseindonev [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.51}] \
	-reverseindoffev [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.50}]
# OpenLCB_Dispatcher East_Double_Track_Sig -eleclasstype SignalPlate
OpenLCB_Dispatcher create %AUTO% -name East_Double_Track_Sig \
	-eleclasstype SignalPlate \

# OpenLCB_Dispatcher Stage_East_2_4_Code -eleclasstype CodeButton
OpenLCB_Dispatcher create %AUTO% -name Stage_East_2_4_Code \
	-eleclasstype CodeButton \

# OpenLCB_Dispatcher WestEN -eleclasstype Signal -eventidaspectlist {05.01.01.01.22.81.00.40 {red red} 05.01.01.01.22.81.00.41 {red yellow} 05.01.01.01.22.81.00.42 {red green} 05.01.01.01.22.81.00.43 {yellow red} 05.01.01.01.22.81.00.44 {green red}}
OpenLCB_Dispatcher create %AUTO% -name WestEN \
	-eleclasstype Signal \
	-eventidaspectlist [list \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.81.00.40}] \
{red red} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.81.00.41}] \
{red yellow} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.81.00.42}] \
{red green} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.81.00.43}] \
{yellow red} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.81.00.44}] \
{green red} \
	]
# OpenLCB_Dispatcher WestMainTrack1a -eleclasstype Block
OpenLCB_Dispatcher create %AUTO% -name WestMainTrack1a \
	-eleclasstype Block \

# OpenLCB_Dispatcher EastYardEntry1-3 -eleclasstype Signal -eventidaspectlist {05.01.01.01.22.83.00.D0 {red red} 05.01.01.01.22.83.00.D1 {red yellow} 05.01.01.01.22.83.00.D2 {red green} 05.01.01.01.22.83.00.D3 {yellow red} 05.01.01.01.22.83.00.D4 {green red}}
OpenLCB_Dispatcher create %AUTO% -name EastYardEntry1-3 \
	-eleclasstype Signal \
	-eventidaspectlist [list \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.D0}] \
{red red} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.D1}] \
{red yellow} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.D2}] \
{red green} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.D3}] \
{yellow red} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.D4}] \
{green red} \
	]
# OpenLCB_Dispatcher Stage_West_1_3 -eleclasstype Switch -statenormaleventid 05.01.01.01.22.83.00.50 -statereverseeventid 05.01.01.01.22.83.00.51
OpenLCB_Dispatcher create %AUTO% -name Stage_West_1_3 \
	-eleclasstype Switch \
	-statenormaleventid [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.50}] \
	-statereverseeventid [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.51}]
# OpenLCB_Dispatcher EastF1 -eleclasstype Signal -eventidaspectlist {05.01.01.01.22.82.00.50 red 05.01.01.01.22.82.00.51 yellow 05.01.01.01.22.82.00.52 green}
OpenLCB_Dispatcher create %AUTO% -name EastF1 \
	-eleclasstype Signal \
	-eventidaspectlist [list \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.82.00.50}] \
{red} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.82.00.51}] \
{yellow} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.82.00.52}] \
{green} \
	]
# OpenLCB_Dispatcher WestYardEntry1-3 -eleclasstype Signal -eventidaspectlist {05.01.01.01.22.83.00.60 {red red} 05.01.01.01.22.83.00.61 {red yellow} 05.01.01.01.22.83.00.62 {red green} 05.01.01.01.22.83.00.63 {yellow red} 05.01.01.01.22.83.00.64 {green red}}
OpenLCB_Dispatcher create %AUTO% -name WestYardEntry1-3 \
	-eleclasstype Signal \
	-eventidaspectlist [list \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.60}] \
{red red} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.61}] \
{red yellow} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.62}] \
{red green} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.63}] \
{yellow red} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.64}] \
{green red} \
	]
# OpenLCB_Dispatcher WestFM -eleclasstype Signal -eventidaspectlist {05.01.01.01.22.81.00.50 red 05.01.01.01.22.81.00.51 yellow 05.01.01.01.22.81.00.52 green}
OpenLCB_Dispatcher create %AUTO% -name WestFM \
	-eleclasstype Signal \
	-eventidaspectlist [list \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.81.00.50}] \
{red} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.81.00.51}] \
{yellow} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.81.00.52}] \
{green} \
	]
# OpenLCB_Dispatcher East_Double_Track_Plate -eleclasstype SwitchPlate -normaleventid 05.01.01.01.22.82.00.18 -reverseeventid 05.01.01.01.22.82.00.19 -normalindonev 05.01.01.01.22.82.00.30 -normalindoffev 05.01.01.01.22.82.00.31 -reverseindonev 05.01.01.01.22.82.00.31 -reverseindoffev 05.01.01.01.22.82.00.30
OpenLCB_Dispatcher create %AUTO% -name East_Double_Track_Plate \
	-eleclasstype SwitchPlate \
	-normaleventid [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.82.00.18}] \
	-reverseeventid [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.82.00.19}] \
	-normalindonev [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.82.00.30}] \
	-normalindoffev [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.82.00.31}] \
	-reverseindonev [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.82.00.31}] \
	-reverseindoffev [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.82.00.30}]
# OpenLCB_Dispatcher EastMainTrack1 -eleclasstype Block
OpenLCB_Dispatcher create %AUTO% -name EastMainTrack1 \
	-eleclasstype Block \

# OpenLCB_Dispatcher Stage_1E -eleclasstype Block
OpenLCB_Dispatcher create %AUTO% -name Stage_1E \
	-eleclasstype Block \

# OpenLCB_Dispatcher Stage_East_2_4_Plate -eleclasstype SwitchPlate -normaleventid 05.01.01.01.22.84.00.1A -reverseeventid 05.01.01.01.22.84.00.1B -normalindonev 05.01.01.01.22.84.00.32 -normalindoffev 05.01.01.01.22.84.00.33 -reverseindonev 05.01.01.01.22.84.00.33 -reverseindoffev 05.01.01.01.22.84.00.32
OpenLCB_Dispatcher create %AUTO% -name Stage_East_2_4_Plate \
	-eleclasstype SwitchPlate \
	-normaleventid [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.84.00.1A}] \
	-reverseeventid [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.84.00.1B}] \
	-normalindonev [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.84.00.32}] \
	-normalindoffev [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.84.00.33}] \
	-reverseindonev [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.84.00.33}] \
	-reverseindoffev [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.84.00.32}]
# OpenLCB_Dispatcher EastMainTrack2 -eleclasstype Block
OpenLCB_Dispatcher create %AUTO% -name EastMainTrack2 \
	-eleclasstype Block \

# OpenLCB_Dispatcher West_Double_Track_code -eleclasstype CodeButton
OpenLCB_Dispatcher create %AUTO% -name West_Double_Track_code \
	-eleclasstype CodeButton \

# OpenLCB_Dispatcher Stage_East_2_4 -eleclasstype Switch -statenormaleventid 05.01.01.01.22.84.00.32 -statereverseeventid 05.01.01.01.22.84.00.33
OpenLCB_Dispatcher create %AUTO% -name Stage_East_2_4 \
	-eleclasstype Switch \
	-statenormaleventid [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.84.00.32}] \
	-statereverseeventid [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.84.00.33}]
# OpenLCB_Dispatcher EastYardEntry2-4 -eleclasstype Signal -eventidaspectlist {05.01.01.01.22.83.00.E0 {red red} 05.01.01.01.22.83.00.E1 {red yellow} 05.01.01.01.22.83.00.E2 {red green} 05.01.01.01.22.83.00.E3 {yellow red} 05.01.01.01.22.83.00.E4 {green red}}
OpenLCB_Dispatcher create %AUTO% -name EastYardEntry2-4 \
	-eleclasstype Signal \
	-eventidaspectlist [list \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.E0}] \
{red red} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.E1}] \
{red yellow} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.E2}] \
{red green} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.E3}] \
{yellow red} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.E4}] \
{green red} \
	]
# OpenLCB_Dispatcher Stage_West_2_4 -eleclasstype Switch -statenormaleventid 05.01.01.01.22.83.00.50 -statereverseeventid 05.01.01.01.22.83.00.51
OpenLCB_Dispatcher create %AUTO% -name Stage_West_2_4 \
	-eleclasstype Switch \
	-statenormaleventid [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.50}] \
	-statereverseeventid [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.51}]
# OpenLCB_Dispatcher Stage_2E -eleclasstype Block
OpenLCB_Dispatcher create %AUTO% -name Stage_2E \
	-eleclasstype Block \

# OpenLCB_Dispatcher Stage_East_1_3_Plate -eleclasstype SwitchPlate -normaleventid 05.01.01.01.22.84.00.18 -reverseeventid 05.01.01.01.22.84.00.19 -normalindonev 05.01.01.01.22.84.00.30 -normalindoffev 05.01.01.01.22.84.00.31 -reverseindonev 05.01.01.01.22.84.00.31 -reverseindoffev 05.01.01.01.22.84.00.30
OpenLCB_Dispatcher create %AUTO% -name Stage_East_1_3_Plate \
	-eleclasstype SwitchPlate \
	-normaleventid [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.84.00.18}] \
	-reverseeventid [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.84.00.19}] \
	-normalindonev [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.84.00.30}] \
	-normalindoffev [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.84.00.31}] \
	-reverseindonev [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.84.00.31}] \
	-reverseindoffev [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.84.00.30}]
# OpenLCB_Dispatcher EastEN -eleclasstype Signal -eventidaspectlist {05.01.01.01.22.82.00.40 {red red} 05.01.01.01.22.82.00.41 {red yellow} 05.01.01.01.22.82.00.42 {red green} 05.01.01.01.22.82.00.43 {yellow red} 05.01.01.01.22.82.00.44 {green red}}
OpenLCB_Dispatcher create %AUTO% -name EastEN \
	-eleclasstype Signal \
	-eventidaspectlist [list \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.82.00.40}] \
{red red} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.82.00.41}] \
{red yellow} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.82.00.42}] \
{red green} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.82.00.43}] \
{yellow red} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.82.00.44}] \
{green red} \
	]
# OpenLCB_Dispatcher WestYardEntry2-4 -eleclasstype Signal -eventidaspectlist {05.01.01.01.22.83.00.70 {red red} 05.01.01.01.22.83.00.71 {red yellow} 05.01.01.01.22.83.00.72 {red green} 05.01.01.01.22.83.00.73 {yellow red} 05.01.01.01.22.83.00.74 {green red}}
OpenLCB_Dispatcher create %AUTO% -name WestYardEntry2-4 \
	-eleclasstype Signal \
	-eventidaspectlist [list \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.70}] \
{red red} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.71}] \
{red yellow} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.72}] \
{red green} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.73}] \
{yellow red} \
		[lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.83.00.74}] \
{green red} \
	]
# OpenLCB_Dispatcher Stage_1W -eleclasstype Block
OpenLCB_Dispatcher create %AUTO% -name Stage_1W \
	-eleclasstype Block \

# OpenLCB_Dispatcher Stage_3E -eleclasstype Block
OpenLCB_Dispatcher create %AUTO% -name Stage_3E \
	-eleclasstype Block \

# OpenLCB_Dispatcher Stage_East_1_3_Sig -eleclasstype SignalPlate
OpenLCB_Dispatcher create %AUTO% -name Stage_East_1_3_Sig \
	-eleclasstype SignalPlate \

# OpenLCB_Dispatcher Stage_East_1_3_Code -eleclasstype CodeButton
OpenLCB_Dispatcher create %AUTO% -name Stage_East_1_3_Code \
	-eleclasstype CodeButton \

# OpenLCB_Dispatcher West_Double_Track_Plate -eleclasstype SwitchPlate -normaleventid 05.01.01.01.22.81.00.18 -reverseeventid 05.01.01.01.22.81.00.19 -normalindonev 05.01.01.01.22.81.00.30 -normalindoffev 05.01.01.01.22.81.00.31 -reverseindonev 05.01.01.01.22.81.00.31 -reverseindoffev 05.01.01.01.22.81.00.30
OpenLCB_Dispatcher create %AUTO% -name West_Double_Track_Plate \
	-eleclasstype SwitchPlate \
	-normaleventid [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.81.00.18}] \
	-reverseeventid [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.81.00.19}] \
	-normalindonev [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.81.00.30}] \
	-normalindoffev [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.81.00.31}] \
	-reverseindonev [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.81.00.31}] \
	-reverseindoffev [lcc::EventID %AUTO% -eventidstring {05.01.01.01.22.81.00.30}]
# User LCC Modules Begin
# User LCC Module: DispatcherLogic
snit::type DispatcherLogic {
    option -openlcb -type ::OpenLCB_Dispatcher -readonly yes
    option -name    -default {}
    variable opticalSensors -array {
        West_Stage_Exit_3 {
            {West Stage Exit 3}
            05.01.01.01.22.83.00.04
            05.01.01.01.22.83.00.05
        }
        West_Stage_Exit_1 {
            {West Stage Exit 1}
            05.01.01.01.22.83.00.06
            05.01.01.01.22.83.00.07
        }
        West_Stage_Exit_2 {
            {West Stage Exit 2}
            05.01.01.01.22.83.00.10
            05.01.01.01.22.83.00.11
        }
        West_Stage_Exit_4 {
            {West Stage Exit 4}
            05.01.01.01.22.83.00.12
            05.01.01.01.22.83.00.13
        }
        East_Double_Track_Entrance {
            {East Double Track Entrance}
            05.01.01.01.22.82.00.00
            05.01.01.01.22.82.00.01
        }
        East_Double_Track_Frog_Stop {
            {East Double Track Frog Stop}
            05.01.01.01.22.82.00.04
            05.01.01.01.22.82.00.05
        }
        East_Double_Track_Straight_Stop {
            {East Double Track Straight Stop}
            05.01.01.01.22.82.00.02
            05.01.01.01.22.82.00.03
        }
        West_Double_Track_Entrance {
            {West Double Track Entrance}
            05.01.01.01.22.81.00.00
            05.01.01.01.22.81.00.01
        }
        West_Double_Track_Frog_Stop {
            {West Double Track Frog Stop}
            05.01.01.01.22.81.00.04
            05.01.01.01.22.81.00.05
        }
        West_Double_Track_Straight_Stop {
            {West Double Track Straight Stop}
            05.01.01.01.22.81.00.02
            05.01.01.01.22.81.00.03
        }
        Stage_West_1_3_Entrance {
            {Stage West 1-3 Entrance}
            05.01.01.01.22.83.00.00
            05.01.01.01.22.83.00.01
        }
        Stage_West_2_4_Entrance {
            {Stage West 2-4 Entrance}
            05.01.01.01.22.83.00.02
            05.01.01.01.22.83.00.03
        }
        Stage_East_1_3_Entrance {
            {Stage East 1-3 Entrance}
            05.01.01.01.22.84.00.04
            05.01.01.01.22.84.00.05
        }
        Stage_East_2_4_Entrance {
            {Stage East 2-4 Entrance}
            05.01.01.01.22.84.00.06
            05.01.01.01.22.84.00.07
        }
        Wendell_Depot_Rd_Grade_Crossing {
            {Wendell Depot Rd Grade Crossing}
            05.01.01.01.22.80.00.00
            05.01.01.01.22.80.00.01
        }
        East_Stage_Exit_3 {
            {East Stage Exit 3}
            05.01.01.01.22.83.00.14
            05.01.01.01.22.83.00.15
        }
        East_Stage_Exit_1 {
            {East Stage Exit 1}
            05.01.01.01.22.83.00.16
            05.01.01.01.22.83.00.17
        }
        East_Stage_Exit_2 {
            {East Stage Exit 2}
            05.01.01.01.22.84.00.00
            05.01.01.01.22.84.00.01
        }
        East_Stage_Exit_4 {
            {East Stage Exit 4}
            05.01.01.01.22.84.00.02
            05.01.01.01.22.84.00.03
        }
    }
    variable occupied -array {}
    variable sensorSigPlateMap -array {
        West_Stage_Exit_1 {Stage_West_1_3_Sig 
            Left {East_Stage_Exit_1 {Stage_1E Stage_1W}}
            Right {Stage_West_1_3_Entrance Stage_West_1_3}
        }
        West_Stage_Exit_3 {Stage_West_1_3_Sig 
            Left {East_Stage_Exit_3 {Stage_3E Stage_3W}}
            Right {Stage_West_1_3_Entrance Stage_West_1_3}
        }
        Stage_West_1_3_Entrance {Stage_West_1_3_Sig 
            Left {{West_Stage_Exit_1 West_Stage_Exit_3} Stage_West_1_3} 
            Right {West_Double_Track_Frog_Stop {WestMainTrack1 WestMainTrack1a}}
        }
        West_Stage_Exit_2 {Stage_West_2_4_Sig 
            Left {East_Stage_Exit_2 {Stage_2E Stage_2W}}
            Right {Stage_West_2_4_Entrance Stage_West_2_4}
        }
        West_Stage_Exit_4 {Stage_West_2_4_Sig 
            Left {East_Stage_Exit_4 {Stage_4E Stage_4W}}
            Right {Stage_West_2_4_Entrance Stage_West_2_4}
        }
        Stage_West_2_4_Entrance {Stage_West_2_4_Sig 
            Left {{West_Stage_Exit_2 West_Stage_Exit_4} Stage_West_2_4}
            Right {West_Double_Track_Straight_Stop WestMainTrack2}
        }
        West_Double_Track_Frog_Stop {West_Double_Track_Sig
            Left {Stage_West_1_3_Entrance {WestMainTrack1 WestMainTrack1a}}
            Right {West_Double_Track_Entrance West_Double_Track}
        }
        West_Double_Track_Straight_Stop {West_Double_Track_Sig
            Left {Stage_West_2_4_Entrance WestMainTrack2}
            Right {West_Double_Track_Entrance West_Double_Track}
        }
        West_Double_Track_Entrance {West_Double_Track_Sig
            Left {{West_Double_Track_Frog_Stop West_Double_Track_Straight_Stop} West_Double_Track}
            Right {East_Double_Track_Entrance WendellDepot}
        }
        East_Double_Track_Entrance {East_Double_Track_Sig
            Left {West_Double_Track_Entrance WendellDepot}
            Right {{East_Double_Track_Frog_Stop East_Double_Track_Straight_Stop} East_Double_Track}
        }
        East_Double_Track_Frog_Stop {East_Double_Track_Sig
            Left {East_Double_Track_Entrance East_Double_Track}
            Right {Stage_East_2_4_Entrance {EastMainTrack2 EastMainTrack2a}}
        }
        East_Double_Track_Straight_Stop {East_Double_Track_Sig
            Left {East_Double_Track_Entrance East_Double_Track}
            Right {Stage_East_1_3_Entrance EastMainTrack1}
        }
        Stage_East_1_3_Entrance {Stage_East_1_3_Sig
            Left {East_Double_Track_Straight_Stop EastMainTrack1}
            Right {{East_Stage_Exit_1 East_Stage_Exit_3} Stage_East_1_3}
        }
        East_Stage_Exit_1 {Stage_East_1_3_Sig
            Left {Stage_East_1_3_Entrance Stage_East_1_3}
            Right {West_Stage_Exit_1 {Stage_1E Stage_1W}}
        }
        East_Stage_Exit_3 {Stage_East_1_3_Sig
            Left {Stage_East_1_3_Entrance Stage_East_1_3}
            Right {West_Stage_Exit_3 {Stage_3E Stage_3W}}
        }
        Stage_East_2_4_Entrance {Stage_East_2_4_Sig
            Left {East_Double_Track_Frog_Stop {EastMainTrack2 EastMainTrack2a}}
            Right {{East_Stage_Exit_2 East_Stage_Exit_4} Stage_East_2_4}
        }
        East_Stage_Exit_2 {Stage_East_2_4_Sig
            Left {Stage_East_2_4_Entrance Stage_East_2_4}
            Right {West_Stage_Exit_2 {Stage_2E Stage_2W}}
        }
        East_Stage_Exit_4 {Stage_East_2_4_Sig
            Left {Stage_East_2_4_Entrance Stage_East_2_4}
            Right {West_Stage_Exit_4 {Stage_4E Stage_4W}}
        }
    }
    variable sensorState -array {}
    variable blockOccupiedState -array {}
    variable switchOccupiedState -array {}
    variable Signals [list]
    variable Turnouts [list]
    variable Blocks [list]
    variable SignalPlates [list]
    variable LeftBound -array {
        Stage_West_1_3_Sig {Stage_West_1_3_Plate
            Normal {WestExit1 0 WestExit3 0 WestYardEntry1-3 4}
            Reverse {WestExit1 0 WestExit3 0 WestYardEntry1-3 2}
        }
        Stage_West_2_4_Sig {Stage_West_2_4_Plate
            Normal {WestExit2 0 WestExit4 0 WestYardEntry2-4 4}
            Reverse {WestExit2 0 WestExit4 0 WestYardEntry2-4 2}
        }
        West_Double_Track_Sig {West_Double_Track_Plate
            Normal {WestEN 4 WestF1 0 WestFM 0}
            Reverse {WestEN 2 WestF1 0 WestFM 0}
        }
        East_Double_Track_Sig {East_Double_Track_Plate
            Normal {EastEN 0 EastF1 0 EastFM 2}
            Reverse {EastEN 0 EastF1 2 EastFM 0}
        }
        Stage_East_1_3_Sig {Stage_East_1_3_Plate
            Normal {EastExit1 1 EastExit3 0 EastYardEntry1-3 0}
            Reverse {EastExit1 0 EastExit3 1 EastYardEntry1-3 0}
        }
        Stage_East_2_4_Sig {Stage_East_2_4_Plate
            Normal {EastExit2 1 EastExit4 0 EastYardEntry2-4 0}
            Reverse {EastExit2 0 EastExit4 1 EastYardEntry2-4 0}
        }
    }
    variable RightBound -array {
        Stage_West_1_3_Sig {Stage_West_1_3_Plate
            Normal {WestExit1 1 WestExit3 0 WestYardEntry1-3 0}
            Reverse {WestExit1 0 WestExit3 1 WestYardEntry1-3 0}
        }
        Stage_West_2_4_Sig {Stage_West_2_4_Plate
            Normal {WestExit2 1 WestExit4 0 WestYardEntry2-4 0}
            Reverse {WestExit2 0 WestExit4 1 WestYardEntry2-4 0}
        }
        West_Double_Track_Sig {West_Double_Track_Plate
            Normal {WestEN 0 WestF1 0 WestFM 2}
            Reverse {WestEN 0 WestF1 2 WestFM 0}
        }
        East_Double_Track_Sig {East_Double_Track_Plate
            Normal {EastEN 4 EastF1 0 EastFM 0}
            Reverse {EastEN 2 EastF1 0 EastFM 0}
        }
        Stage_East_1_3_Sig {Stage_East_1_3_Plate
            Normal {EastExit1 0 EastExit3 0 EastYardEntry1-3 4}
            Reverse {EastExit1 0 EastExit3 0 EastYardEntry1-3 2}
        }
        Stage_East_2_4_Sig {Stage_East_2_4_Plate
            Normal {EastExit2 0 EastExit4 0 EastYardEntry2-4 4}
            Reverse {EastExit2 0 EastExit4 0 EastYardEntry2-4 2}
        }
    }
    variable CenterBound -array {
        Stage_West_1_3_Sig {Stage_West_1_3_Plate
            Normal {WestExit1 0 WestExit3 0 WestYardEntry1-3 0}
            Reverse {WestExit1 0 WestExit3 0 WestYardEntry1-3 0}
        }
        Stage_West_2_4_Sig {Stage_West_2_4_Plate
            Normal {WestExit2 0 WestExit4 0 WestYardEntry2-4 0}
            Reverse {WestExit2 0 WestExit4 0 WestYardEntry2-4 0}
        }
        West_Double_Track_Sig {West_Double_Track_Plate
            Normal {WestEN 0 WestF1 0 WestFM 0}
            Reverse {WestEN 0 WestF1 0 WestFM 0}
        }
        East_Double_Track_Sig {East_Double_Track_Plate
            Normal {EastEN 0 EastF1 0 EastFM 0}
            Reverse {EastEN 0 EastF1 0 EastFM 0}
        }
        Stage_East_1_3_Sig {Stage_East_1_3_Plate
            Normal {EastExit1 0 EastExit3 0 EastYardEntry1-3 0}
            Reverse {EastExit1 0 EastExit3 0 EastYardEntry1-3 0}
        }
        Stage_East_2_4_Sig {Stage_East_2_4_Plate
            Normal {EastExit2 0 EastExit4 0 EastYardEntry2-4 0}
            Reverse {EastExit2 0 EastExit4 0 EastYardEntry2-4 0}
        }
    }
    variable blockProtectionSignals -array {
        Stage_West_1_3 {WestYardEntry1-3 WestExit1 WestExit3}
        Stage_East_1_3 {EastYardEntry1-3 EastExit1 EastExit3}
        Stage_West_2_4 {WestYardEntry2-4 WestExit2 WestExit4}
        Stage_East_2_4 {EastYardEntry2-4 EastExit2 EastExit4}
        West_Double_Track {WestEN WestF1 WestFM}
        East_Double_Track {EastEN EastF1 EastFM}
    }
    method protectBlock {signals} {
        foreach s $signals {
            set sig [::OpenLCB_Dispatcher GetElementByName $s]
            set eventidaspectlist [$sig cget -eventidaspectlist]
            set event [lindex $eventidaspectlist 0]
            if {$event ne ""} {
                [$self cget -openlcb] sendMyEvent $event
            }
        }
    }
    constructor {args} {
        $self configurelist $args
        set Signals [::OpenLCB_Dispatcher GetElementByType Signal]
        set Blocks [::OpenLCB_Dispatcher GetElementByType Block]
        foreach b $Blocks {
            set occupied([$b cget -name]) no
            set blockState([$b cget -name]) unknown
            MainWindow ctcpanel itemconfigure [$b cget -name] \
                  -occupiedcommand [mymethod occupiedp [$b cget -name]]
        }
        set Turnouts [::OpenLCB_Dispatcher GetElementByType Switch]    
        foreach t $Turnouts {
            set occupied([$t cget -name]) no
            set blockState([$t cget -name]) unknown
            MainWindow ctcpanel itemconfigure [$t cget -name] \
                  -occupiedcommand [mymethod occupiedp [$t cget -name]]
        }
        set SignalPlates [::OpenLCB_Dispatcher GetElementByType SignalPlate]
        foreach s $SignalPlates {
            MainWindow ctcpanel itemconfigure [$s cget -name] \
                  -leftcommand [mymethod _sigPlateLeft [$s cget -name]] \
                  -centercommand [mymethod _sigPlateCenter [$s cget -name]] \
                  -rightcommand [mymethod _sigPlateRight  [$s cget -name]]
        }
        foreach optsensor [array names opticalSensors] {
            lassign $opticalSensors($optsensor) name on off
            set opticalSensors($optsensor) \
                  [list $name \
                   [lcc::EventID %AUTO% -eventidstring $on] \
                   [lcc::EventID %AUTO% -eventidstring $off]]
            set sensorState($optsensor) unknown
        }
    }
    method occupiedp {bname} {
        return $occupied($bname)
    }
    method _sigPlateLeft {sname} {
        set v $LeftBound($sname)
        set switch [lindex $v 0]
        set dict [lrange $v 1 end]
        set lever [MainWindow ctcpanel getv $switch]
        if {$lever ni [dict keys $dict]} {return}
        set signaldict [dict get $dict $lever]
        foreach {s a} $signaldict {
            set sig [::OpenLCB_Dispatcher GetElementByName $s]
            set eventidaspectlist [$sig cget -eventidaspectlist]
            set event [lindex $eventidaspectlist [expr {$a*2}]]
            if {$event ne ""} {
                [$self cget -openlcb] sendMyEvent $event
            }
        }
    }
    method _sigPlateCenter {sname} {
        set v $CenterBound($sname)
        set switch [lindex $v 0]
        set dict [lrange $v 1 end]
        set lever [MainWindow ctcpanel getv $switch]
        if {$lever ni [dict keys $dict]} {return}
        set signaldict [dict get $dict $lever]
        foreach {s a} $signaldict {
            set sig [::OpenLCB_Dispatcher GetElementByName $s]
            set eventidaspectlist [$sig cget -eventidaspectlist]
            set event [lindex $eventidaspectlist [expr {$a*2}]]
            if {$event ne ""} {
                [$self cget -openlcb] sendMyEvent $event
            }
        }
    }
    method _sigPlateRight {sname} {
        set v $RightBound($sname)
        set switch [lindex $v 0]
        set dict [lrange $v 1 end]
        set lever [MainWindow ctcpanel getv $switch]
        if {$lever ni [dict keys $dict]} {return}
        set signaldict [dict get $dict $lever]
        foreach {s a} $signaldict {
            set sig [::OpenLCB_Dispatcher GetElementByName $s]
            set eventidaspectlist [$sig cget -eventidaspectlist]
            set event [lindex $eventidaspectlist [expr {$a*2}]]
            if {$event ne ""} {
                [$self cget -openlcb] sendMyEvent $event
            }
        }
    }
    method sendevent {eopt} {
        set ev [$self cget $eopt]
        if {$ev ne ""} {
            [$self cget -openlcb] sendMyEvent $ev
        }
    }
    method consumerP {} {return yes}
    method producerP {} {return no}
    method consumedEvents {} {
        set events [list]
        foreach os [array names opticalSensors] {
            lassign $opticalSensors($os) name on off
            lappend events $on $off
        }
        return $events
    }
    method producedEvents {} {
        return [list]
    }
    method consumeEvent {event} {
        foreach os [array names opticalSensors] {
            lassign $opticalSensors($os) name on off
            if {[$on match $event]} {
                set sigplate [lindex $sensorSigPlateMap($os) 0]
                set sensedict [lrange $sensorSigPlateMap($os) 1 end]
                set dir [MainWindow ctcpanel getv $sigplate]
                if {$dir ni {Left Right}} {return}
                if {[info exists sensorState($name)]} {
                    lassign $sensorState($name) state blocks
                    if {$state eq "covered"} {
                        set sensorState($name) [list uncovered $blocks]
                    } 
                } else {
                    lassign [dict get $sensedict $dir] otherend blocks
                    foreach b $blocks {
                        set occupied($b) yes
                        MainWindow ctcpanel invoke $b
                        if {[info exists blockProtectionSignals($b)]} {
                            $self protectBlock $blockProtectionSignals($b)
                        }
                    }
                    set sensorState($name) [list uncovered $blocks]
                    foreach o $otherend {
                        set sensorState($o) [list covered $blocks]
                    }
                }
                break
            } elseif {[$off match $event]} {
                if {![info exists sensorState($name)]} {return}
                lassign $sensorState($name) state blocks
                if {$state eq "uncovered"} {
                    unset sensorState($name)
                    foreach b $blocks {
                        set occupied($b) no
                        MainWindow ctcpanel invoke $b
                    }
                }
                break
            }
        }
    }
}

# OpenLCB_Dispatcher DispatcherLogic -eleclasstype UserCodeModule -usermoduleconstructor DispatcherLogic
OpenLCB_Dispatcher create %AUTO% -name DispatcherLogic \
	-eleclasstype UserCodeModule \
	-usermoduleconstructor DispatcherLogic
# User LCC Modules End
OpenLCB_Dispatcher SendMyEvents
